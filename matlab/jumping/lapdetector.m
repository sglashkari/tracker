function lap = lapdetector(exp_directory, tai, taf)
%Lap Detector gets a data file (data.mat) that is generated by winclust2mat
% and detects the lap info from it.
%
%  Inputs:
%       Experiment Directory
%       Time Analysis (Initial)
%       Tiem Analysis (Final)
%
% SGL 2020-11-28
%
clc; close all

if nargin == 0
    exp_directory = '/home/shahin/Desktop/2020-11-22_Rat913-03';
    [datafile,exp_directory] = uigetfile(fullfile(exp_directory,'data.mat'), 'Select Data File');
    if isequal(datafile, 0)
        error('Data file was not selected!')
    end
end
mat_filename = fullfile(exp_directory, 'data.mat');
load(mat_filename, 'pos', 'spike', 'ppcm')
clearvars -except datafile exp_directory pos spike ppcm offset;

[img_file,img_directory] = uigetfile(fullfile(exp_directory,'Videos','*.pgm'), 'Select Image File');
if isequal(img_file, 0)
    error('Image file was not selected!')
end
img_filename = fullfile(img_directory, img_file);

colors = ["#EDB120" "#7E2F8E" "yellow" "#A2142F" "red" "magenta" "green" "#D95319"];
colors = repmat(colors', ceil(length(spike)/length(colors))); % repeat the colors to match the total number of spikes

I = imread(img_filename);
xmax = ceil(size(I,2)/ppcm);

%%% Plotting the position vs time and marking neural recording times,

%% time detection: recording, maze, and analysis

event_filename = fullfile(exp_directory, 'Neuralynx', 'Events.nev');
[Time,Data,Header,EventIDs,TTLs] = readevent(event_filename);

% time of recording
tri = Time(string(Data)=='Starting Recording'); % time of recording (initial)
trf = Time(string(Data)=='Stopping Recording'); % time of recording (final)

hold on
for i=1:length(tri)
    rectangle('Position',[tri(i),0,trf(i)-tri(i),xmax],'FaceColor','y')
end

% time of maze
mi = Data(contains(string(Data),"start",'IgnoreCase',true) & (EventIDs==4)');
if ~isempty(mi) % when mazes have start and stop
    tmi = Time(contains(string(Data),"start",'IgnoreCase',true) & (EventIDs==4)'); % time of maze initial
    tmf = Time(contains(string(Data),"stop",'IgnoreCase',true) & (EventIDs==4)'); % time of maze final
    mf = Data(contains(string(Data),"stop",'IgnoreCase',true) & (EventIDs==4)');
else % when mazes don't have start and stop
    tmi = Time(EventIDs==4); % time of maze initial
    mi = Data(EventIDs==4);
    tmf = Time(find(EventIDs==4) + 1); % time of maze final
    mf = Data(find(EventIDs==4) + 1);
end

for i=1:length(tmi)
    rectangle('Position',[tmi(i),0,tmf(i)-tmi(i),xmax],'FaceColor',[0 .8 .8])
end

% time of analysis
if nargin < 3
    tai = tri(1:end);
    taf = trf(1:end);
end

% extract data only during the time of analysis
t_crop_idx = zeros(length(pos.t),1);
for i=1:length(tai)
    t_crop_idx = t_crop_idx | ((pos.t > tai(i)) & (pos.t < taf(i)));
end

t = pos.t(t_crop_idx);
x = pos.x(t_crop_idx);
y = pos.y(t_crop_idx);
vx = pos.vx(t_crop_idx);
vy = pos.vy(t_crop_idx);
s = pos.s(t_crop_idx);
frame = pos.frame(t_crop_idx);

plot(pos.t, pos.x, '.b', t, x, '.k')
ylim([0 xmax])

%% jump detection

% criterion
criterion = abs(vx) > 200;
plot(t,200*criterion,'-r')

x_thresh = 84;
dx = x - x_thresh;

% times that the rats jump (based on jump direction)
jump_criteria_lefttward = (diff(x > x_thresh) == -1) & (abs(diff(x)) < 10) & (vx(2:end) < -100); % multiple criterion
jump_criteria_rightward = (diff(x > x_thresh) == 1) & (abs(diff(x)) < 10) & (vx(2:end) > 100); % multiple criterion
time_jump_leftward = t(jump_criteria_lefttward);
time_jump_rightward = t(jump_criteria_rightward);
x_jump_leftward = x(jump_criteria_lefttward);
x_jump_rightward = x(jump_criteria_rightward);

plot(time_jump_leftward, x_jump_leftward, 'hk', 'MarkerSize',15)
plot(time_jump_rightward, x_jump_rightward, 'hr', 'MarkerSize',15)

%% detecting beginning and end of laps (extremes)
time_jump = sort([time_jump_leftward;time_jump_rightward; tai; taf;taf(end)]); % exception handling for start of stop of analysis
l = 1;
N = length(time_jump);

for i = 1:2:N-2
    %lap extremes (max and min)
    jump_idx_lap = t>=time_jump(i) & t<=time_jump(i+2);
    tl = t(jump_idx_lap);
    [x_right(l), idx] = max(x(jump_idx_lap));
    t_right(l) = tl(idx);
    
    [x_left(l), idx] = min(x(jump_idx_lap));
    t_left(l) = tl(idx);
    l = l+1;
end

% ignore extremes in the vicinity of the gap
t_right(x_right < x_thresh + 15) = [];
x_right(x_right < x_thresh + 15) = [];
t_left(x_left > x_thresh - 15) = [];
x_left(x_left > x_thresh - 15) = [];

plot(t_right, x_right, 'pk', 'MarkerSize',15)
plot(t_left, x_left, 'sk', 'MarkerSize',15)

%% lap detection
time_jump = sort([time_jump_leftward;time_jump_rightward]); % no exception handling
time_extreme = sort([t_right t_left]);
N = length(time_extreme);
l = 1;

for i=1:N-1
    % leftward laps
    if ismember(time_extreme(i),t_right) && ismember(time_extreme(i+1),t_left) ...
            && (nnz(time_jump >= time_extreme(i) & time_jump <= time_extreme(i+1))>0)
        lap(l).dir = "left";
        lap(l).no = l;
        lap(l).t = [time_extreme(i) time_extreme(i+1)];
        % time of jump in the lap
        lap(l).t_jump = time_jump(time_jump >= time_extreme(i) & time_jump <= time_extreme(i+1));
        lap(l).frame = pos.frame(pos.t==lap(l).t_jump); % frame of jump in the lap
        l = l+1;
    end
    % rightward laps
    if ismember(time_extreme(i),t_left) && ismember(time_extreme(i+1),t_right) ...
            && (nnz(time_jump >= time_extreme(i) & time_jump <= time_extreme(i+1))>0)
        lap(l).dir = "right";
        lap(l).no = l;
        lap(l).t = [time_extreme(i) time_extreme(i+1)];
        % time of jump in the lap
        lap(l).t_jump = time_jump(time_jump >= time_extreme(i) & time_jump <= time_extreme(i+1));
        lap(l).frame = pos.frame(pos.t==lap(l).t_jump); % frame no of jump in the lap
        l = l+1;
    end
end

%% plotting each lap seperately IN ALTERNATING COLORS (first one is red)
for l=1:length(lap)
    idx = t >= lap(l).t(1) & t <= lap(l).t(2);
    if mod(l,2) == 0
        color = '.g';
    else
        color = '.m';
    end
    if l == 1
        color = '.r';
    end
    plot(t(idx),x(idx),color)
end

set(gcf, 'Position', [100 100 2000 1500]);

%% save file if the functiona in called, otherwise display the info
if nargout ~= 0
    analysis_directory = fullfile(exp_directory, 'Analysis');
    if ~exist(analysis_directory, 'dir')
       mkdir(analysis_directory)
    end
    saveas(gcf,fullfile(analysis_directory,'overall_view.jpg'));
else
    format longG
    disp(["Time              Data"]);
    disp([Time string(Data)]);
    disp('Frame numbers: ')
    for l=1:length(lap)
        fprintf('%d,',lap(l).frame);
    end
    disp('\n')
    fprintf('Maze Times: \n')
    disp([tmi string(mi) tmf string(mf)])
    fprintf('Analysis Times: \n')
    disp([tai taf])
    clear lap;
end

end